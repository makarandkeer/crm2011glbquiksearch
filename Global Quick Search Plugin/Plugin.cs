// <copyright file="Plugin.cs" company="Microsoft IT">
// Copyright (c) 2012 All Rights Reserved
// </copyright>
// <author>Microsoft IT</author>
// <date>10/4/2012 5:06:16 PM</date>
// <summary>Implements the Plugin Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace CRMUtil.ISV.GlobalQuickSearch_Plugin
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using System.Linq;
    using System.ServiceModel;
    using System.Xml;
    using System.Xml.Linq;

    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Metadata;
    using Microsoft.Xrm.Sdk.Client;
    using Microsoft.Xrm.Sdk.Linq;
    using Microsoft.Xrm.Sdk.Messages;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// Base class for all Plugins.
    /// </summary>    
    public class Plugin : IPlugin
    {
        protected class LocalPluginContext
        {
            internal IServiceProvider ServiceProvider
            {
                get;

                private set;
            }

            internal IOrganizationService OrganizationService
            {
                get;

                private set;
            }

            internal IPluginExecutionContext PluginExecutionContext
            {
                get;

                private set;
            }

            internal ITracingService TracingService
            {
                get;

                private set;
            }

            private LocalPluginContext()
            {
            }

            internal LocalPluginContext(IServiceProvider serviceProvider)
            {
                if (serviceProvider == null)
                {
                    throw new ArgumentNullException("serviceProvider");
                }

                // Obtain the execution context service from the service provider.
                this.PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));

                // Obtain the tracing service from the service provider.
                this.TracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

                // Obtain the Organization Service factory service from the service provider
                IOrganizationServiceFactory factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));

                // Use the factory to generate the Organization Service.
                this.OrganizationService = factory.CreateOrganizationService(this.PluginExecutionContext.UserId);
            }

            internal void Trace(string message)
            {
                if (string.IsNullOrWhiteSpace(message) || this.TracingService == null)
                {
                    return;
                }

                if (this.PluginExecutionContext == null)
                {
                    this.TracingService.Trace(message);
                }
                else
                {
                    this.TracingService.Trace(
                        "{0}, Correlation Id: {1}, Initiating User: {2}",
                        message,
                        this.PluginExecutionContext.CorrelationId,
                        this.PluginExecutionContext.InitiatingUserId);
                }
            }
        }

        private Collection<Tuple<int, string, string, Action<LocalPluginContext>>> registeredEvents;

        /// <summary>
        /// Gets the List of events that the plug-in should fire for. Each List
        /// Item is a <see cref="System.Tuple"/> containing the Pipeline Stage, Message and (optionally) the Primary Entity. 
        /// In addition, the fourth parameter provide the delegate to invoke on a matching registration.
        /// </summary>
        protected Collection<Tuple<int, string, string, Action<LocalPluginContext>>> RegisteredEvents
        {
            get
            {
                if (this.registeredEvents == null)
                {
                    this.registeredEvents = new Collection<Tuple<int, string, string, Action<LocalPluginContext>>>();
                }

                return this.registeredEvents;
            }
        }

        /// <summary>
        /// Gets or sets the name of the child class.
        /// </summary>
        /// <value>The name of the child class.</value>
        protected string ChildClassName
        {
            get;

            private set;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Plugin"/> class.
        /// </summary>
        /// <param name="childClassName">The <see cref=" cred="Type"/> of the derived class.</param>
        internal Plugin(Type childClassName)
        {
            this.ChildClassName = childClassName.ToString();
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="serviceProvider">The service provider.</param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances. 
        /// The plug-in's Execute method should be written to be stateless as the constructor 
        /// is not called for every invocation of the plug-in. Also, multiple system threads 
        /// could execute the plug-in at the same time. All per invocation state information 
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        public void Execute(IServiceProvider serviceProvider)
        {
            if (serviceProvider == null)
            {
                throw new ArgumentNullException("serviceProvider");
            }

            // Construct the Local plug-in context.
            LocalPluginContext localcontext = new LocalPluginContext(serviceProvider);

            localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "Entered {0}.Execute()", this.ChildClassName));

            try
            {
                // Iterate over all of the expected registered events to ensure that the plugin
                // has been invoked by an expected event
                // For any given plug-in event at an instance in time, we would expect at most 1 result to match.
                Action<LocalPluginContext> entityAction =
                    (from a in this.RegisteredEvents
                     where (
                     a.Item1 == localcontext.PluginExecutionContext.Stage &&
                     a.Item2 == localcontext.PluginExecutionContext.MessageName &&
                     (string.IsNullOrWhiteSpace(a.Item3) ? true : a.Item3 == localcontext.PluginExecutionContext.PrimaryEntityName)
                     )
                     select a.Item4).FirstOrDefault();

                if (entityAction != null)
                {
                    localcontext.Trace(string.Format(
                        CultureInfo.InvariantCulture, 
                        "{0} is firing for Entity: {1}, Message: {2}",
                        this.ChildClassName,
                        localcontext.PluginExecutionContext.PrimaryEntityName,
                        localcontext.PluginExecutionContext.MessageName));

                    entityAction.Invoke(localcontext);

                    // now exit - if the derived plug-in has incorrectly registered overlapping event registrations,
                    // guard against multiple executions.
                    return;
                }
            }
            catch (FaultException<OrganizationServiceFault> e)
            {
                localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "Exception: {0}", e.ToString()));

                // Handle the exception.
                throw;
            }
            finally
            {
                localcontext.Trace(string.Format(CultureInfo.InvariantCulture, "Exiting {0}.Execute()", this.ChildClassName));
            }
        }

        protected void GetAndSetFetchXml(string entityLogicalName, LocalPluginContext localContext)
        {
            Entity e = new Entity(localContext.PluginExecutionContext.PrimaryEntityName);
            e["gqs_globalquicksearchconfigid"] = localContext.PluginExecutionContext.PrimaryEntityId;
            e["gqs_quicksearchfetchxml"] = null;
            e["gqs_quicksearchformattedfetchxml"] = null;
            e["gqs_message"] = null;

            QueryExpression query = new QueryExpression();
            query.EntityName = "savedquery";
            query.ColumnSet.AddColumns("returnedtypecode", "fetchxml", "layout");
            query.Criteria.AddCondition(new ConditionExpression("returnedtypecode", ConditionOperator.Equal, entityLogicalName));
            query.Criteria.AddCondition(new ConditionExpression("querytype", ConditionOperator.Equal, 4));
            query.Criteria.AddCondition(new ConditionExpression("isdefault", ConditionOperator.Equal, true));

            EntityCollection ec = null;
            try
            {
                ec = localContext.OrganizationService.RetrieveMultiple(query);
            }
            catch (FaultException<OrganizationServiceFault> Ex)
            {
                e["gqs_message"] = Ex.Detail.Message;
                localContext.OrganizationService.Update(e);
                throw;
            }

            if (ec != null && ec.Entities.Count > 0)
            {
                #region If True
                string _fetchXml = ec.Entities[0]["fetchxml"].ToString();
                XDocument xDoc = XDocument.Parse(_fetchXml);

                Dictionary<string, string> cells = GetLayout(ec.Entities[0]["layout"].ToString());

                RetrieveEntityRequest entityMetadataReq = new RetrieveEntityRequest();

                entityMetadataReq.LogicalName = entityLogicalName;
                entityMetadataReq.EntityFilters = Microsoft.Xrm.Sdk.Metadata.EntityFilters.Entity | Microsoft.Xrm.Sdk.Metadata.EntityFilters.Attributes;

                RetrieveEntityResponse entityMetadataRes = (RetrieveEntityResponse)localContext.OrganizationService.Execute(entityMetadataReq);

                if (entityMetadataRes != null && entityMetadataRes.EntityMetadata != null)
                {
                    XElement entityXmlElement = xDoc.Root.Element("entity");

                    entityXmlElement.SetAttributeValue("displayName", entityMetadataRes.EntityMetadata.DisplayCollectionName.UserLocalizedLabel.Label);

                    foreach (KeyValuePair<string, string> cell in cells)
                    {
                        string _logicalname = cell.Key;
                        XElement attributeXml = entityXmlElement.Elements("attribute").Where(a => a.Attribute("name").Value == cell.Key).FirstOrDefault<XElement>();

                        AttributeMetadata atm = entityMetadataRes.EntityMetadata.Attributes.Where(a => a.LogicalName == _logicalname).FirstOrDefault<AttributeMetadata>();
                        attributeXml.SetAttributeValue("displayName", atm.DisplayName.UserLocalizedLabel.Label);

                        if (atm.IsPrimaryId.Value)
                        {
                            attributeXml.SetAttributeValue("isPk", true);
                        }
                        else
                        {
                            attributeXml.SetAttributeValue("isPk", false);
                        }

                        if (atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Lookup ||
                            atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Picklist ||
                            atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Customer)
                        {
                            foreach (XElement conditionXml in entityXmlElement.Descendants("condition").Where(a => a.Attribute("attribute").Value == _logicalname))
                            {
                                conditionXml.SetAttributeValue("attribute", _logicalname + "name");
                            }
                        }

                        //foreach (XElement attributeXml in entityXmlElement.Elements("attribute"))
                        //{
                        //    string _logicalname = attributeXml.Attribute("name").Value;
                        //    AttributeMetadata atm = entityMetadataRes.EntityMetadata.Attributes.Where(a => a.LogicalName == _logicalname).FirstOrDefault<AttributeMetadata>();

                        //    attributeXml.SetAttributeValue("displayName", atm.DisplayName.UserLocalizedLabel.Label);

                        //    if (atm.IsPrimaryId.Value)
                        //    {
                        //        attributeXml.SetAttributeValue("isPk", true);
                        //    }
                        //    else
                        //    {
                        //        attributeXml.SetAttributeValue("isPk", false);
                        //    }

                        //    if (atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Lookup ||
                        //        atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Picklist ||
                        //        atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Customer)
                        //    {
                        //        foreach (XElement conditionXml in entityXmlElement.Descendants("condition").Where(a => a.Attribute("attribute").Value == _logicalname))
                        //        {
                        //            conditionXml.SetAttributeValue("attribute", _logicalname + "name");
                        //        }
                        //    }
                        //}
                    }
                    
                    e["gqs_quicksearchfetchxml"] = _fetchXml;
                    e["gqs_quicksearchformattedfetchxml"] = xDoc.ToString();
                }
                else
                {
                    e["gqs_message"] = string.Format("Unable to retrieve Entity Metadata for given Entity Logical Name: {0}", entityLogicalName);
                }
                #endregion
            }
            else
            {
                e["gqs_message"] = string.Format("Given Entity Logical Name: {0}, is invalid, please give correct entity logical name and save the record", entityLogicalName);
            }
            localContext.OrganizationService.Update(e);
        }

        public void GetAndSetFetchXml(string entityLogicalName, Guid primaryKeyId, IOrganizationService orgSvc)
        {
            Entity e = new Entity("gqs_globalquicksearchconfig");
            e["gqs_globalquicksearchconfigid"] = primaryKeyId;
            e["gqs_quicksearchfetchxml"] = null;
            e["gqs_quicksearchformattedfetchxml"] = null;
            e["gqs_message"] = null;

            QueryExpression query = new QueryExpression();
            query.EntityName = "savedquery";
            query.ColumnSet.AddColumns("returnedtypecode", "fetchxml", "layoutxml");
            query.Criteria.AddCondition(new ConditionExpression("returnedtypecode", ConditionOperator.Equal, entityLogicalName));
            query.Criteria.AddCondition(new ConditionExpression("querytype", ConditionOperator.Equal, 4));
            query.Criteria.AddCondition(new ConditionExpression("isdefault", ConditionOperator.Equal, true));

            EntityCollection ec = null;
            try
            {
                ec = orgSvc.RetrieveMultiple(query);
            }
            catch (FaultException<OrganizationServiceFault> Ex)
            {
                e["gqs_message"] = Ex.Detail.Message;
                orgSvc.Update(e);
                throw;
            }

            if (ec != null && ec.Entities.Count > 0)
            {
                #region If True
                string _fetchXml = ec.Entities[0]["fetchxml"].ToString();
                XDocument xDoc = XDocument.Parse(_fetchXml);

                Dictionary<string, string> cells = GetLayout(ec.Entities[0]["layoutxml"].ToString());

                RetrieveEntityRequest entityMetadataReq = new RetrieveEntityRequest();

                entityMetadataReq.LogicalName = entityLogicalName;
                entityMetadataReq.EntityFilters = Microsoft.Xrm.Sdk.Metadata.EntityFilters.Entity | Microsoft.Xrm.Sdk.Metadata.EntityFilters.Attributes;

                RetrieveEntityResponse entityMetadataRes = (RetrieveEntityResponse)orgSvc.Execute(entityMetadataReq);

                if (entityMetadataRes != null && entityMetadataRes.EntityMetadata != null)
                {
                    XElement entityXmlElement = xDoc.Root.Element("entity");

                    entityXmlElement.SetAttributeValue("displayName", entityMetadataRes.EntityMetadata.DisplayCollectionName.UserLocalizedLabel.Label);

                    int _displayOrder = 1;

                    foreach (KeyValuePair<string, string> cell in cells)
                    {
                        //string _logicalname = cell.Key;
                        XElement attributeXml = entityXmlElement.Elements("attribute").Where(a => a.Attribute("name").Value == cell.Key).FirstOrDefault<XElement>();

                        if (attributeXml != null)
                        {
                            string _logicalname = attributeXml.Attribute("name").Value;
                            AttributeMetadata atm = entityMetadataRes.EntityMetadata.Attributes.Where(a => a.LogicalName == _logicalname).FirstOrDefault<AttributeMetadata>();
                            attributeXml.SetAttributeValue("displayName", atm.DisplayName.UserLocalizedLabel.Label);
                            attributeXml.SetAttributeValue("displayOrder", _displayOrder++);
                            attributeXml.SetAttributeValue("columnWidth", cell.Value);

                            if (atm.IsPrimaryId.Value)
                            {
                                attributeXml.SetAttributeValue("isPk", true);
                            }
                            else
                            {
                                attributeXml.SetAttributeValue("isPk", false);
                            }
                            //if (atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Lookup ||
                            //    atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Picklist ||
                            //    atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Customer)
                            //{
                            //    foreach (XElement conditionXml in entityXmlElement.Descendants("condition").Where(a => a.Attribute("attribute").Value == _logicalname))
                            //    {
                            //        conditionXml.SetAttributeValue("attribute", _logicalname + "name");
                            //    }
                            //}
                        }
                        #region Commented Code
                        //foreach (XElement attributeXml in entityXmlElement.Elements("attribute"))
                        //{
                        //    string _logicalname = attributeXml.Attribute("name").Value;
                        //    AttributeMetadata atm = entityMetadataRes.EntityMetadata.Attributes.Where(a => a.LogicalName == _logicalname).FirstOrDefault<AttributeMetadata>();

                        //    attributeXml.SetAttributeValue("displayName", atm.DisplayName.UserLocalizedLabel.Label);

                        //    if (atm.IsPrimaryId.Value)
                        //    {
                        //        attributeXml.SetAttributeValue("isPk", true);
                        //    }
                        //    else
                        //    {
                        //        attributeXml.SetAttributeValue("isPk", false);
                        //    }

                        //    if (atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Lookup ||
                        //        atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Picklist ||
                        //        atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Customer)
                        //    {
                        //        foreach (XElement conditionXml in entityXmlElement.Descendants("condition").Where(a => a.Attribute("attribute").Value == _logicalname))
                        //        {
                        //            conditionXml.SetAttributeValue("attribute", _logicalname + "name");
                        //        }
                        //    }
                        //}
                        #endregion
                    }

                    //Removing related entity with name = link-entity
                    entityXmlElement.Descendants("link-entity").Remove<XElement>();

                    //Removing condition element which has value !="{0}"
                    entityXmlElement.Descendants("condition").Where(a => a.Attribute("value").Value != "{0}").Remove<XElement>();

                    foreach (XElement conditionXml in entityXmlElement.Descendants("condition"))
                    {
                        string _logicalname = conditionXml.Attribute("attribute").Value;
                        AttributeMetadata atm = entityMetadataRes.EntityMetadata.Attributes.Where(a => a.LogicalName == _logicalname).FirstOrDefault<AttributeMetadata>();

                        if (atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Lookup ||
                            atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Picklist ||
                            atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Customer ||
                            atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Owner ||
                            atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Status ||
                            atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.State ||
                            atm.AttributeType == Microsoft.Xrm.Sdk.Metadata.AttributeTypeCode.Boolean)
                        {
                            conditionXml.SetAttributeValue("attribute", _logicalname + "name");
                        }
                    }

                    e["gqs_quicksearchfetchxml"] = _fetchXml;
                    e["gqs_quicksearchformattedfetchxml"] = xDoc.ToString();
                }
                else
                {
                    e["gqs_message"] = string.Format("Unable to retrieve Entity Metadata for given Entity Logical Name: {0}", entityLogicalName);
                }
                #endregion
            }
            else
            {
                e["gqs_message"] = string.Format("Given Entity Logical Name: {0}, is invalid, please give correct entity logical name and save the record", entityLogicalName);
            }
            orgSvc.Update(e);
        }

        protected Dictionary<string, string> GetLayout(string layoutXml)
        {
            Dictionary<string, string> cells = new Dictionary<string, string>();

//            string _layoutXml = @"<grid name='resultset' object='1' jump='name' select='1' icon='1' preview='1'>
//	<row name='result' id='accountid'>
//		<cell name='name' width='300'/>
//		<cell name='a_410707b195544cd984376608b1802904.address1_telephone1' width='100' disableSorting='1'/>
//		<cell name='a_410707b195544cd984376608b1802904.firstname' width='100' disableSorting='1'/>
//		<cell name='accountcategorycode' width='100'/>
//		<cell name='industrycode' width='100'/>
//		<cell name='accountnumber' width='100'/>
//		<cell name='primarycontactid' width='150'/>
//		<cell name='address1_city' width='100'/>
//		<cell name='telephone1' width='100'/>
//		<cell name='emailaddress1' width='200'/>
//		<cell name='creditlimit' width='100'/>
//		<cell name='ownerid' width='100'/>
//	</row>
//</grid>";

            XDocument _xDoc = XDocument.Parse(layoutXml);
            var rowXe = _xDoc.Root.Element("row");
            var xe = rowXe.Elements("cell");

            cells.Add(rowXe.Attribute("id").Value, "0");

            foreach (XElement e in xe)
            {
                cells.Add(e.Attribute("name").Value, e.Attribute("width").Value);
            }

            return cells;
        }
    }
}